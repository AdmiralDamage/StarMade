/*    1:     */package com.jcraft.jorbis;
/*    2:     */
/*    9:     */class Drft
/*   10:     */{
/*   11:     */  int n;
/*   12:     */  
/*   18:     */  float[] trigcache;
/*   19:     */  
/*   25:     */  int[] splitcache;
/*   26:     */  
/*   33:     */  void backward(float[] data)
/*   34:     */  {
/*   35:  35 */    if (this.n == 1)
/*   36:  36 */      return;
/*   37:  37 */    drftb1(this.n, data, this.trigcache, this.trigcache, this.n, this.splitcache);
/*   38:     */  }
/*   39:     */  
/*   40:     */  void init(int n) {
/*   41:  41 */    this.n = n;
/*   42:  42 */    this.trigcache = new float[3 * n];
/*   43:  43 */    this.splitcache = new int[32];
/*   44:  44 */    fdrffti(n, this.trigcache, this.splitcache);
/*   45:     */  }
/*   46:     */  
/*   47:     */  void clear() {
/*   48:  48 */    if (this.trigcache != null)
/*   49:  49 */      this.trigcache = null;
/*   50:  50 */    if (this.splitcache != null)
/*   51:  51 */      this.splitcache = null;
/*   52:     */  }
/*   53:     */  
/*   54:  54 */  static int[] ntryh = { 4, 2, 3, 5 };
/*   55:  55 */  static float tpi = 6.283186F;
/*   56:  56 */  static float hsqt2 = 0.7071068F;
/*   57:  57 */  static float taui = 0.8660254F;
/*   58:  58 */  static float taur = -0.5F;
/*   59:  59 */  static float sqrt2 = 1.414214F;
/*   60:     */  
/*   61:     */  static void drfti1(int n, float[] wa, int index, int[] ifac)
/*   62:     */  {
/*   63:  63 */    int ntry = 0;int j = -1;
/*   64:     */    
/*   67:  67 */    int nl = n;
/*   68:  68 */    int nf = 0;
/*   69:     */    
/*   70:  70 */    int state = 101;
/*   71:     */    for (;;) {
/*   72:     */      int i;
/*   73:  73 */      switch (state) {
/*   74:     */      case 101: 
/*   75:  75 */        j++;
/*   76:  76 */        if (j < 4) {
/*   77:  77 */          ntry = ntryh[j];
/*   78:     */        } else
/*   79:  79 */          ntry += 2;
/*   80:     */      case 104: 
/*   81:  81 */        int nq = nl / ntry;
/*   82:  82 */        int nr = nl - ntry * nq;
/*   83:  83 */        if (nr != 0) {
/*   84:  84 */          state = 101;
/*   85:     */        }
/*   86:     */        else {
/*   87:  87 */          nf++;
/*   88:  88 */          ifac[(nf + 1)] = ntry;
/*   89:  89 */          nl = nq;
/*   90:  90 */          if (ntry != 2) {
/*   91:  91 */            state = 107;
/*   93:     */          }
/*   94:  94 */          else if (nf == 1) {
/*   95:  95 */            state = 107;
/*   96:     */          }
/*   97:     */          else
/*   98:     */          {
/*   99:  99 */            for (i = 1; i < nf; i++) {
/*  100: 100 */              int ib = nf - i + 1;
/*  101: 101 */              ifac[(ib + 1)] = ifac[ib];
/*  102:     */            }
/*  103: 103 */            ifac[2] = 2;
/*  104:     */          } }
/*  105:     */        break; case 107:  if (nl != 1) {
/*  106: 106 */          state = 104;
/*  107:     */        }
/*  108:     */        else {
/*  109: 109 */          ifac[0] = n;
/*  110: 110 */          ifac[1] = nf;
/*  111: 111 */          float argh = tpi / n;
/*  112: 112 */          int is = 0;
/*  113: 113 */          int nfm1 = nf - 1;
/*  114: 114 */          int l1 = 1;
/*  115:     */          
/*  116: 116 */          if (nfm1 == 0) {
/*  117: 117 */            return;
/*  118:     */          }
/*  119: 119 */          for (int k1 = 0; k1 < nfm1; k1++) {
/*  120: 120 */            int ip = ifac[(k1 + 2)];
/*  121: 121 */            int ld = 0;
/*  122: 122 */            int l2 = l1 * ip;
/*  123: 123 */            int ido = n / l2;
/*  124: 124 */            int ipm = ip - 1;
/*  125:     */            
/*  126: 126 */            for (j = 0; j < ipm; j++) {
/*  127: 127 */              ld += l1;
/*  128: 128 */              i = is;
/*  129: 129 */              float argld = ld * argh;
/*  130: 130 */              float fi = 0.0F;
/*  131: 131 */              for (int ii = 2; ii < ido; ii += 2) {
/*  132: 132 */                fi += 1.0F;
/*  133: 133 */                float arg = fi * argld;
/*  134: 134 */                wa[(index + i++)] = ((float)Math.cos(arg));
/*  135: 135 */                wa[(index + i++)] = ((float)Math.sin(arg));
/*  136:     */              }
/*  137: 137 */              is += ido;
/*  138:     */            }
/*  139: 139 */            l1 = l2; } }
/*  140:     */        break; } }
/*  141:     */    int nfm1;
/*  142:     */    int is;
/*  143:     */    int l1;
/*  144:     */    int k1;
/*  145:     */    float argh; }
/*  146:     */  
/*  147: 147 */  static void fdrffti(int n, float[] wsave, int[] ifac) { if (n == 1)
/*  148: 148 */      return;
/*  149: 149 */    drfti1(n, wsave, n, ifac);
/*  150:     */  }
/*  151:     */  
/*  156:     */  static void dradf2(int ido, int l1, float[] cc, float[] ch, float[] wa1, int index)
/*  157:     */  {
/*  158: 158 */    int t1 = 0;
/*  159: 159 */    int t2; int t0 = t2 = l1 * ido;
/*  160: 160 */    int t3 = ido << 1;
/*  161: 161 */    for (int k = 0; k < l1; k++) {
/*  162: 162 */      ch[(t1 << 1)] = (cc[t1] + cc[t2]);
/*  163: 163 */      ch[((t1 << 1) + t3 - 1)] = (cc[t1] - cc[t2]);
/*  164: 164 */      t1 += ido;
/*  165: 165 */      t2 += ido;
/*  166:     */    }
/*  167:     */    
/*  168: 168 */    if (ido < 2) {
/*  169: 169 */      return;
/*  170:     */    }
/*  171: 171 */    if (ido != 2) {
/*  172: 172 */      t1 = 0;
/*  173: 173 */      t2 = t0;
/*  174: 174 */      for (k = 0; k < l1; k++) {
/*  175: 175 */        t3 = t2;
/*  176: 176 */        int t4 = (t1 << 1) + (ido << 1);
/*  177: 177 */        int t5 = t1;
/*  178: 178 */        int t6 = t1 + t1;
/*  179: 179 */        for (int i = 2; i < ido; i += 2) {
/*  180: 180 */          t3 += 2;
/*  181: 181 */          t4 -= 2;
/*  182: 182 */          t5 += 2;
/*  183: 183 */          t6 += 2;
/*  184: 184 */          float tr2 = wa1[(index + i - 2)] * cc[(t3 - 1)] + wa1[(index + i - 1)] * cc[t3];
/*  185: 185 */          float ti2 = wa1[(index + i - 2)] * cc[t3] - wa1[(index + i - 1)] * cc[(t3 - 1)];
/*  186: 186 */          cc[t5] += ti2;
/*  187: 187 */          ch[t4] = (ti2 - cc[t5]);
/*  188: 188 */          cc[(t5 - 1)] += tr2;
/*  189: 189 */          cc[(t5 - 1)] -= tr2;
/*  190:     */        }
/*  191: 191 */        t1 += ido;
/*  192: 192 */        t2 += ido;
/*  193:     */      }
/*  194: 194 */      if (ido % 2 == 1) {
/*  195: 195 */        return;
/*  196:     */      }
/*  197:     */    }
/*  198: 198 */    t3 = t2 = (t1 = ido) - 1;
/*  199: 199 */    t2 += t0;
/*  200: 200 */    for (k = 0; k < l1; k++) {
/*  201: 201 */      ch[t1] = (-cc[t2]);
/*  202: 202 */      ch[(t1 - 1)] = cc[t3];
/*  203: 203 */      t1 += (ido << 1);
/*  204: 204 */      t2 += ido;
/*  205: 205 */      t3 += ido;
/*  206:     */    }
/*  207:     */  }
/*  208:     */  
/*  211:     */  static void dradf4(int ido, int l1, float[] cc, float[] ch, float[] wa1, int index1, float[] wa2, int index2, float[] wa3, int index3)
/*  212:     */  {
/*  213: 213 */    int t0 = l1 * ido;
/*  214:     */    
/*  215: 215 */    int t1 = t0;
/*  216: 216 */    int t4 = t1 << 1;
/*  217: 217 */    int t2 = t1 + (t1 << 1);
/*  218: 218 */    int t3 = 0;
/*  219:     */    
/*  220: 220 */    for (int k = 0; k < l1; k++) {
/*  221: 221 */      float tr1 = cc[t1] + cc[t2];
/*  222: 222 */      float tr2 = cc[t3] + cc[t4]; int 
/*  223:     */      
/*  224: 224 */        tmp63_62 = (t3 << 2);int t5 = tmp63_62;ch[tmp63_62] = (tr1 + tr2);
/*  225: 225 */      ch[((ido << 2) + t5 - 1)] = (tr2 - tr1); int 
/*  226: 226 */        tmp94_93 = (t5 + (ido << 1));t5 = tmp94_93;ch[(tmp94_93 - 1)] = (cc[t3] - cc[t4]);
/*  227: 227 */      cc[t2] -= cc[t1];
/*  228:     */      
/*  229: 229 */      t1 += ido;
/*  230: 230 */      t2 += ido;
/*  231: 231 */      t3 += ido;
/*  232: 232 */      t4 += ido;
/*  233:     */    }
/*  234: 234 */    if (ido < 2) {
/*  235: 235 */      return;
/*  236:     */    }
/*  237: 237 */    if (ido != 2) {
/*  238: 238 */      t1 = 0;
/*  239: 239 */      for (k = 0; k < l1; k++) {
/*  240: 240 */        t2 = t1;
/*  241: 241 */        t4 = t1 << 2;
/*  242: 242 */        int t6; int t5 = (t6 = ido << 1) + t4;
/*  243: 243 */        for (int i = 2; i < ido; i += 2) {
/*  244: 244 */          t2 += 2;t3 = t2;
/*  245: 245 */          t4 += 2;
/*  246: 246 */          t5 -= 2;
/*  247:     */          
/*  248: 248 */          t3 += t0;
/*  249: 249 */          float cr2 = wa1[(index1 + i - 2)] * cc[(t3 - 1)] + wa1[(index1 + i - 1)] * cc[t3];
/*  250: 250 */          float ci2 = wa1[(index1 + i - 2)] * cc[t3] - wa1[(index1 + i - 1)] * cc[(t3 - 1)];
/*  251: 251 */          t3 += t0;
/*  252: 252 */          float cr3 = wa2[(index2 + i - 2)] * cc[(t3 - 1)] + wa2[(index2 + i - 1)] * cc[t3];
/*  253: 253 */          float ci3 = wa2[(index2 + i - 2)] * cc[t3] - wa2[(index2 + i - 1)] * cc[(t3 - 1)];
/*  254: 254 */          t3 += t0;
/*  255: 255 */          float cr4 = wa3[(index3 + i - 2)] * cc[(t3 - 1)] + wa3[(index3 + i - 1)] * cc[t3];
/*  256: 256 */          float ci4 = wa3[(index3 + i - 2)] * cc[t3] - wa3[(index3 + i - 1)] * cc[(t3 - 1)];
/*  257:     */          
/*  258: 258 */          float tr1 = cr2 + cr4;
/*  259: 259 */          float tr4 = cr4 - cr2;
/*  260: 260 */          float ti1 = ci2 + ci4;
/*  261: 261 */          float ti4 = ci2 - ci4;
/*  262:     */          
/*  263: 263 */          float ti2 = cc[t2] + ci3;
/*  264: 264 */          float ti3 = cc[t2] - ci3;
/*  265: 265 */          float tr2 = cc[(t2 - 1)] + cr3;
/*  266: 266 */          float tr3 = cc[(t2 - 1)] - cr3;
/*  267:     */          
/*  268: 268 */          ch[(t4 - 1)] = (tr1 + tr2);
/*  269: 269 */          ch[t4] = (ti1 + ti2);
/*  270:     */          
/*  271: 271 */          ch[(t5 - 1)] = (tr3 - ti4);
/*  272: 272 */          ch[t5] = (tr4 - ti3);
/*  273:     */          
/*  274: 274 */          ch[(t4 + t6 - 1)] = (ti4 + tr3);
/*  275: 275 */          ch[(t4 + t6)] = (tr4 + ti3);
/*  276:     */          
/*  277: 277 */          ch[(t5 + t6 - 1)] = (tr2 - tr1);
/*  278: 278 */          ch[(t5 + t6)] = (ti1 - ti2);
/*  279:     */        }
/*  280: 280 */        t1 += ido;
/*  281:     */      }
/*  282: 282 */      if ((ido & 0x1) != 0) {
/*  283: 283 */        return;
/*  284:     */      }
/*  285:     */    }
/*  286: 286 */    t2 = (t1 = t0 + ido - 1) + (t0 << 1);
/*  287: 287 */    t3 = ido << 2;
/*  288: 288 */    t4 = ido;
/*  289: 289 */    int t5 = ido << 1;
/*  290: 290 */    int t6 = ido;
/*  291:     */    
/*  292: 292 */    for (k = 0; k < l1; k++) {
/*  293: 293 */      float ti1 = -hsqt2 * (cc[t1] + cc[t2]);
/*  294: 294 */      float tr1 = hsqt2 * (cc[t1] - cc[t2]);
/*  295:     */      
/*  296: 296 */      ch[(t4 - 1)] = (tr1 + cc[(t6 - 1)]);
/*  297: 297 */      ch[(t4 + t5 - 1)] = (cc[(t6 - 1)] - tr1);
/*  298:     */      
/*  299: 299 */      ch[t4] = (ti1 - cc[(t1 + t0)]);
/*  300: 300 */      ch[(t4 + t5)] = (ti1 + cc[(t1 + t0)]);
/*  301:     */      
/*  302: 302 */      t1 += ido;
/*  303: 303 */      t2 += ido;
/*  304: 304 */      t4 += t3;
/*  305: 305 */      t6 += ido;
/*  306:     */    }
/*  307:     */  }
/*  308:     */  
/*  310:     */  static void dradfg(int ido, int ip, int l1, int idl1, float[] cc, float[] c1, float[] c2, float[] ch, float[] ch2, float[] wa, int index)
/*  311:     */  {
/*  312: 312 */    int t2 = 0;
/*  313:     */    
/*  315: 315 */    float dcp = 0.0F;float dsp = 0.0F;
/*  316:     */    
/*  318: 318 */    float arg = tpi / ip;
/*  319: 319 */    dcp = (float)Math.cos(arg);
/*  320: 320 */    dsp = (float)Math.sin(arg);
/*  321: 321 */    int ipph = ip + 1 >> 1;
/*  322: 322 */    int ipp2 = ip;
/*  323: 323 */    int idp2 = ido;
/*  324: 324 */    int nbd = ido - 1 >> 1;
/*  325: 325 */    int t0 = l1 * ido;
/*  326: 326 */    int t10 = ip * ido;
/*  327:     */    
/*  328: 328 */    int state = 100;
/*  329:     */    for (;;) { int ik;
/*  330: 330 */      int t1; int j; int t3; int k; int i; int t1; int t4; int t5; switch (state) {
/*  331:     */      case 101: 
/*  332: 332 */        if (ido == 1) {
/*  333: 333 */          state = 119;
/*  334:     */        }
/*  335:     */        else {
/*  336: 336 */          for (ik = 0; ik < idl1; ik++) {
/*  337: 337 */            ch2[ik] = c2[ik];
/*  338:     */          }
/*  339: 339 */          t1 = 0;
/*  340: 340 */          for (j = 1; j < ip; j++) {
/*  341: 341 */            t1 += t0;
/*  342: 342 */            t2 = t1;
/*  343: 343 */            for (int k = 0; k < l1; k++) {
/*  344: 344 */              ch[t2] = c1[t2];
/*  345: 345 */              t2 += ido;
/*  346:     */            }
/*  347:     */          }
/*  348:     */          
/*  349: 349 */          int is = -ido;
/*  350: 350 */          t1 = 0;
/*  351: 351 */          if (nbd > l1) {
/*  352: 352 */            for (j = 1; j < ip; j++) {
/*  353: 353 */              t1 += t0;
/*  354: 354 */              is += ido;
/*  355: 355 */              t2 = -ido + t1;
/*  356: 356 */              for (int k = 0; k < l1; k++) {
/*  357: 357 */                int idij = is - 1;
/*  358: 358 */                t2 += ido;
/*  359: 359 */                int t3 = t2;
/*  360: 360 */                for (int i = 2; i < ido; i += 2) {
/*  361: 361 */                  idij += 2;
/*  362: 362 */                  t3 += 2;
/*  363: 363 */                  ch[(t3 - 1)] = (wa[(index + idij - 1)] * c1[(t3 - 1)] + wa[(index + idij)] * c1[t3]);
/*  364: 364 */                  ch[t3] = (wa[(index + idij - 1)] * c1[t3] - wa[(index + idij)] * c1[(t3 - 1)]);
/*  365:     */                }
/*  366:     */              }
/*  367:     */            }
/*  368:     */          }
/*  369:     */          
/*  371: 371 */          for (j = 1; j < ip; j++) {
/*  372: 372 */            is += ido;
/*  373: 373 */            int idij = is - 1;
/*  374: 374 */            t1 += t0;
/*  375: 375 */            t2 = t1;
/*  376: 376 */            for (int i = 2; i < ido; i += 2) {
/*  377: 377 */              idij += 2;
/*  378: 378 */              t2 += 2;
/*  379: 379 */              int t3 = t2;
/*  380: 380 */              for (int k = 0; k < l1; k++) {
/*  381: 381 */                ch[(t3 - 1)] = (wa[(index + idij - 1)] * c1[(t3 - 1)] + wa[(index + idij)] * c1[t3]);
/*  382: 382 */                ch[t3] = (wa[(index + idij - 1)] * c1[t3] - wa[(index + idij)] * c1[(t3 - 1)]);
/*  383: 383 */                t3 += ido;
/*  384:     */              }
/*  385:     */            }
/*  386:     */          }
/*  387:     */          
/*  389: 389 */          t1 = 0;
/*  390: 390 */          t2 = ipp2 * t0;
/*  391: 391 */          if (nbd < l1) {
/*  392: 392 */            for (j = 1; j < ipph; j++) {
/*  393: 393 */              t1 += t0;
/*  394: 394 */              t2 -= t0;
/*  395: 395 */              int t3 = t1;
/*  396: 396 */              int t4 = t2;
/*  397: 397 */              for (int i = 2; i < ido; i += 2) {
/*  398: 398 */                t3 += 2;
/*  399: 399 */                t4 += 2;
/*  400: 400 */                int t5 = t3 - ido;
/*  401: 401 */                int t6 = t4 - ido;
/*  402: 402 */                for (int k = 0; k < l1; k++) {
/*  403: 403 */                  t5 += ido;
/*  404: 404 */                  t6 += ido;
/*  405: 405 */                  ch[(t5 - 1)] += ch[(t6 - 1)];
/*  406: 406 */                  c1[(t6 - 1)] = (ch[t5] - ch[t6]);
/*  407: 407 */                  ch[t5] += ch[t6];
/*  408: 408 */                  c1[t6] = (ch[(t6 - 1)] - ch[(t5 - 1)]);
/*  409:     */                }
/*  410:     */              }
/*  411:     */            }
/*  412:     */          }
/*  413:     */          
/*  414: 414 */          for (j = 1; j < ipph; j++) {
/*  415: 415 */            t1 += t0;
/*  416: 416 */            t2 -= t0;
/*  417: 417 */            int t3 = t1;
/*  418: 418 */            int t4 = t2;
/*  419: 419 */            for (int k = 0; k < l1; k++) {
/*  420: 420 */              int t5 = t3;
/*  421: 421 */              int t6 = t4;
/*  422: 422 */              for (int i = 2; i < ido; i += 2) {
/*  423: 423 */                t5 += 2;
/*  424: 424 */                t6 += 2;
/*  425: 425 */                ch[(t5 - 1)] += ch[(t6 - 1)];
/*  426: 426 */                c1[(t6 - 1)] = (ch[t5] - ch[t6]);
/*  427: 427 */                ch[t5] += ch[t6];
/*  428: 428 */                c1[t6] = (ch[(t6 - 1)] - ch[(t5 - 1)]);
/*  429:     */              }
/*  430: 430 */              t3 += ido;
/*  431: 431 */              t4 += ido;
/*  432:     */            }
/*  433:     */          }
/*  434:     */        }
/*  435:     */        break;
/*  436: 436 */      case 119:  for (ik = 0; ik < idl1; ik++) {
/*  437: 437 */          c2[ik] = ch2[ik];
/*  438:     */        }
/*  439: 439 */        t1 = 0;
/*  440: 440 */        t2 = ipp2 * idl1;
/*  441: 441 */        for (j = 1; j < ipph; j++) {
/*  442: 442 */          t1 += t0;
/*  443: 443 */          t2 -= t0;
/*  444: 444 */          int t3 = t1 - ido;
/*  445: 445 */          int t4 = t2 - ido;
/*  446: 446 */          for (int k = 0; k < l1; k++) {
/*  447: 447 */            t3 += ido;
/*  448: 448 */            t4 += ido;
/*  449: 449 */            ch[t3] += ch[t4];
/*  450: 450 */            ch[t4] -= ch[t3];
/*  451:     */          }
/*  452:     */        }
/*  453:     */        
/*  454: 454 */        float ar1 = 1.0F;
/*  455: 455 */        float ai1 = 0.0F;
/*  456: 456 */        t1 = 0;
/*  457: 457 */        t2 = ipp2 * idl1;
/*  458: 458 */        t3 = (ip - 1) * idl1;
/*  459: 459 */        for (int l = 1; l < ipph; l++) {
/*  460: 460 */          t1 += idl1;
/*  461: 461 */          t2 -= idl1;
/*  462: 462 */          float ar1h = dcp * ar1 - dsp * ai1;
/*  463: 463 */          ai1 = dcp * ai1 + dsp * ar1;
/*  464: 464 */          ar1 = ar1h;
/*  465: 465 */          int t4 = t1;
/*  466: 466 */          int t5 = t2;
/*  467: 467 */          int t6 = t3;
/*  468: 468 */          int t7 = idl1;
/*  469:     */          
/*  470: 470 */          for (ik = 0; ik < idl1; ik++) {
/*  471: 471 */            ch2[(t4++)] = (c2[ik] + ar1 * c2[(t7++)]);
/*  472: 472 */            ch2[(t5++)] = (ai1 * c2[(t6++)]);
/*  473:     */          }
/*  474:     */          
/*  475: 475 */          float dc2 = ar1;
/*  476: 476 */          float ds2 = ai1;
/*  477: 477 */          float ar2 = ar1;
/*  478: 478 */          float ai2 = ai1;
/*  479:     */          
/*  480: 480 */          t4 = idl1;
/*  481: 481 */          t5 = (ipp2 - 1) * idl1;
/*  482: 482 */          for (j = 2; j < ipph; j++) {
/*  483: 483 */            t4 += idl1;
/*  484: 484 */            t5 -= idl1;
/*  485:     */            
/*  486: 486 */            float ar2h = dc2 * ar2 - ds2 * ai2;
/*  487: 487 */            ai2 = dc2 * ai2 + ds2 * ar2;
/*  488: 488 */            ar2 = ar2h;
/*  489:     */            
/*  490: 490 */            t6 = t1;
/*  491: 491 */            t7 = t2;
/*  492: 492 */            int t8 = t4;
/*  493: 493 */            int t9 = t5;
/*  494: 494 */            for (ik = 0; ik < idl1; ik++) {
/*  495: 495 */              ch2[(t6++)] += ar2 * c2[(t8++)];
/*  496: 496 */              ch2[(t7++)] += ai2 * c2[(t9++)];
/*  497:     */            }
/*  498:     */          }
/*  499:     */        }
/*  500: 500 */        t1 = 0;
/*  501: 501 */        for (j = 1; j < ipph; j++) {
/*  502: 502 */          t1 += idl1;
/*  503: 503 */          t2 = t1;
/*  504: 504 */          for (ik = 0; ik < idl1; ik++) {
/*  505: 505 */            ch2[ik] += c2[(t2++)];
/*  506:     */          }
/*  507:     */        }
/*  508: 508 */        if (ido < l1) {
/*  509: 509 */          state = 132;
/*  510:     */        }
/*  511:     */        else
/*  512:     */        {
/*  513: 513 */          t1 = 0;
/*  514: 514 */          t2 = 0;
/*  515: 515 */          for (k = 0; k < l1; k++) {
/*  516: 516 */            t3 = t1;
/*  517: 517 */            int t4 = t2;
/*  518: 518 */            for (int i = 0; i < ido; i++)
/*  519: 519 */              cc[(t4++)] = ch[(t3++)];
/*  520: 520 */            t1 += ido;
/*  521: 521 */            t2 += t10;
/*  522:     */          }
/*  523: 523 */          state = 135; }
/*  524: 524 */        break;
/*  525:     */      
/*  526:     */      case 132: 
/*  527: 527 */        for (i = 0; i < ido; i++) {
/*  528: 528 */          t1 = i;
/*  529: 529 */          t2 = i;
/*  530: 530 */          for (k = 0; k < l1; k++) {
/*  531: 531 */            cc[t2] = ch[t1];
/*  532: 532 */            t1 += ido;
/*  533: 533 */            t2 += t10;
/*  534:     */          }
/*  535:     */        }
/*  536:     */      case 135: 
/*  537: 537 */        t1 = 0;
/*  538: 538 */        t2 = ido << 1;
/*  539: 539 */        t3 = 0;
/*  540: 540 */        t4 = ipp2 * t0;
/*  541: 541 */        for (j = 1; j < ipph; j++) {
/*  542: 542 */          t1 += t2;
/*  543: 543 */          t3 += t0;
/*  544: 544 */          t4 -= t0;
/*  545:     */          
/*  546: 546 */          int t5 = t1;
/*  547: 547 */          int t6 = t3;
/*  548: 548 */          int t7 = t4;
/*  549:     */          
/*  550: 550 */          for (int k = 0; k < l1; k++) {
/*  551: 551 */            cc[(t5 - 1)] = ch[t6];
/*  552: 552 */            cc[t5] = ch[t7];
/*  553: 553 */            t5 += t10;
/*  554: 554 */            t6 += ido;
/*  555: 555 */            t7 += ido;
/*  556:     */          }
/*  557:     */        }
/*  558:     */        
/*  559: 559 */        if (ido == 1)
/*  560: 560 */          return;
/*  561: 561 */        if (nbd < l1) {
/*  562: 562 */          state = 141;
/*  563:     */        }
/*  564:     */        else
/*  565:     */        {
/*  566: 566 */          t1 = -ido;
/*  567: 567 */          t3 = 0;
/*  568: 568 */          t4 = 0;
/*  569: 569 */          t5 = ipp2 * t0;
/*  570: 570 */          for (j = 1; j < ipph; j++) {
/*  571: 571 */            t1 += t2;
/*  572: 572 */            t3 += t2;
/*  573: 573 */            t4 += t0;
/*  574: 574 */            t5 -= t0;
/*  575: 575 */            int t6 = t1;
/*  576: 576 */            int t7 = t3;
/*  577: 577 */            int t8 = t4;
/*  578: 578 */            int t9 = t5;
/*  579: 579 */            for (int k = 0; k < l1; k++) {
/*  580: 580 */              for (i = 2; i < ido; i += 2) {
/*  581: 581 */                int ic = idp2 - i;
/*  582: 582 */                ch[(i + t8 - 1)] += ch[(i + t9 - 1)];
/*  583: 583 */                ch[(i + t8 - 1)] -= ch[(i + t9 - 1)];
/*  584: 584 */                ch[(i + t8)] += ch[(i + t9)];
/*  585: 585 */                ch[(i + t9)] -= ch[(i + t8)];
/*  586:     */              }
/*  587: 587 */              t6 += t10;
/*  588: 588 */              t7 += t10;
/*  589: 589 */              t8 += ido;
/*  590: 590 */              t9 += ido;
/*  591:     */            }
/*  592:     */          }
/*  593:     */          return;
/*  594:     */        }
/*  595:     */        break; case 141:  t1 = -ido;
/*  596: 596 */        t3 = 0;
/*  597: 597 */        t4 = 0;
/*  598: 598 */        t5 = ipp2 * t0;
/*  599: 599 */        for (j = 1; j < ipph; j++) {
/*  600: 600 */          t1 += t2;
/*  601: 601 */          t3 += t2;
/*  602: 602 */          t4 += t0;
/*  603: 603 */          t5 -= t0;
/*  604: 604 */          for (int i = 2; i < ido; i += 2) {
/*  605: 605 */            int t6 = idp2 + t1 - i;
/*  606: 606 */            int t7 = i + t3;
/*  607: 607 */            int t8 = i + t4;
/*  608: 608 */            int t9 = i + t5;
/*  609: 609 */            for (int k = 0; k < l1; k++) {
/*  610: 610 */              ch[(t8 - 1)] += ch[(t9 - 1)];
/*  611: 611 */              ch[(t8 - 1)] -= ch[(t9 - 1)];
/*  612: 612 */              ch[t8] += ch[t9];
/*  613: 613 */              ch[t9] -= ch[t8];
/*  614: 614 */              t6 += t10;
/*  615: 615 */              t7 += t10;
/*  616: 616 */              t8 += ido;
/*  617: 617 */              t9 += ido;
/*  618:     */            }
/*  619:     */          }
/*  620:     */        }
/*  621:     */      }
/*  622:     */    }
/*  623:     */    int t5;
/*  624:     */    int t4;
/*  625:     */    int t3;
/*  626:     */    int t1;
/*  627:     */    int j;
/*  628:     */  }
/*  629:     */  
/*  630:     */  static void drftf1(int n, float[] c, float[] ch, float[] wa, int[] ifac) {
/*  631: 631 */    int nf = ifac[1];
/*  632: 632 */    int na = 1;
/*  633: 633 */    int l2 = n;
/*  634: 634 */    int iw = n;
/*  635:     */    label383:
/*  636: 636 */    for (int k1 = 0; k1 < nf; k1++) {
/*  637: 637 */      int kh = nf - k1;
/*  638: 638 */      int ip = ifac[(kh + 1)];
/*  639: 639 */      int l1 = l2 / ip;
/*  640: 640 */      int ido = n / l2;
/*  641: 641 */      int idl1 = ido * l1;
/*  642: 642 */      iw -= (ip - 1) * ido;
/*  643: 643 */      na = 1 - na;
/*  644:     */      
/*  645: 645 */      int state = 100;
/*  646:     */      for (;;) {
/*  647: 647 */        switch (state) {
/*  648:     */        case 100: 
/*  649: 649 */          if (ip != 4) {
/*  650: 650 */            state = 102;
/*  651:     */          }
/*  652:     */          else
/*  653:     */          {
/*  654: 654 */            int ix2 = iw + ido;
/*  655: 655 */            int ix3 = ix2 + ido;
/*  656: 656 */            if (na != 0) {
/*  657: 657 */              dradf4(ido, l1, ch, c, wa, iw - 1, wa, ix2 - 1, wa, ix3 - 1);
/*  658:     */            } else
/*  659: 659 */              dradf4(ido, l1, c, ch, wa, iw - 1, wa, ix2 - 1, wa, ix3 - 1);
/*  660: 660 */            state = 110; }
/*  661: 661 */          break;
/*  662:     */        case 102: 
/*  663: 663 */          if (ip != 2) {
/*  664: 664 */            state = 104;
/*  666:     */          }
/*  667: 667 */          else if (na != 0) {
/*  668: 668 */            state = 103;
/*  669:     */          }
/*  670:     */          else {
/*  671: 671 */            dradf2(ido, l1, c, ch, wa, iw - 1);
/*  672: 672 */            state = 110; }
/*  673: 673 */          break;
/*  674:     */        case 103: 
/*  675: 675 */          dradf2(ido, l1, ch, c, wa, iw - 1);
/*  676:     */        case 104: 
/*  677: 677 */          if (ido == 1)
/*  678: 678 */            na = 1 - na;
/*  679: 679 */          if (na != 0) {
/*  680: 680 */            state = 109;
/*  681:     */          }
/*  682:     */          else {
/*  683: 683 */            dradfg(ido, ip, l1, idl1, c, c, c, ch, ch, wa, iw - 1);
/*  684: 684 */            na = 1;
/*  685: 685 */            state = 110; }
/*  686: 686 */          break;
/*  687:     */        case 109: 
/*  688: 688 */          dradfg(ido, ip, l1, idl1, ch, ch, ch, c, c, wa, iw - 1);
/*  689: 689 */          na = 0;
/*  690:     */        case 110: 
/*  691: 691 */          l2 = l1;
/*  692:     */          break label383;
/*  693:     */        }
/*  694:     */      }
/*  695:     */    }
/*  696: 696 */    if (na == 1)
/*  697: 697 */      return;
/*  698: 698 */    for (int i = 0; i < n; i++) {
/*  699: 699 */      c[i] = ch[i];
/*  700:     */    }
/*  701:     */  }
/*  702:     */  
/*  705:     */  static void dradb2(int ido, int l1, float[] cc, float[] ch, float[] wa1, int index)
/*  706:     */  {
/*  707: 707 */    int t0 = l1 * ido;
/*  708:     */    
/*  709: 709 */    int t1 = 0;
/*  710: 710 */    int t2 = 0;
/*  711: 711 */    int t3 = (ido << 1) - 1;
/*  712: 712 */    for (int k = 0; k < l1; k++) {
/*  713: 713 */      cc[t2] += cc[(t3 + t2)];
/*  714: 714 */      ch[(t1 + t0)] = (cc[t2] - cc[(t3 + t2)]);
/*  715: 715 */      t2 = t1 += ido << 1;
/*  716:     */    }
/*  717:     */    
/*  718: 718 */    if (ido < 2)
/*  719: 719 */      return;
/*  720: 720 */    if (ido != 2) {
/*  721: 721 */      t1 = 0;
/*  722: 722 */      t2 = 0;
/*  723: 723 */      for (k = 0; k < l1; k++) {
/*  724: 724 */        t3 = t1;
/*  725: 725 */        int t4; int t5 = (t4 = t2) + (ido << 1);
/*  726: 726 */        int t6 = t0 + t1;
/*  727: 727 */        for (int i = 2; i < ido; i += 2) {
/*  728: 728 */          t3 += 2;
/*  729: 729 */          t4 += 2;
/*  730: 730 */          t5 -= 2;
/*  731: 731 */          t6 += 2;
/*  732: 732 */          cc[(t4 - 1)] += cc[(t5 - 1)];
/*  733: 733 */          float tr2 = cc[(t4 - 1)] - cc[(t5 - 1)];
/*  734: 734 */          cc[t4] -= cc[t5];
/*  735: 735 */          float ti2 = cc[t4] + cc[t5];
/*  736: 736 */          ch[(t6 - 1)] = (wa1[(index + i - 2)] * tr2 - wa1[(index + i - 1)] * ti2);
/*  737: 737 */          ch[t6] = (wa1[(index + i - 2)] * ti2 + wa1[(index + i - 1)] * tr2);
/*  738:     */        }
/*  739: 739 */        t2 = t1 += ido << 1;
/*  740:     */      }
/*  741: 741 */      if (ido % 2 == 1) {
/*  742: 742 */        return;
/*  743:     */      }
/*  744:     */    }
/*  745: 745 */    t1 = ido - 1;
/*  746: 746 */    t2 = ido - 1;
/*  747: 747 */    for (k = 0; k < l1; k++) {
/*  748: 748 */      cc[t2] += cc[t2];
/*  749: 749 */      ch[(t1 + t0)] = (-(cc[(t2 + 1)] + cc[(t2 + 1)]));
/*  750: 750 */      t1 += ido;
/*  751: 751 */      t2 += (ido << 1);
/*  752:     */    }
/*  753:     */  }
/*  754:     */  
/*  757:     */  static void dradb3(int ido, int l1, float[] cc, float[] ch, float[] wa1, int index1, float[] wa2, int index2)
/*  758:     */  {
/*  759: 759 */    int t0 = l1 * ido;
/*  760:     */    
/*  761: 761 */    int t1 = 0;
/*  762: 762 */    int t2 = t0 << 1;
/*  763: 763 */    int t3 = ido << 1;
/*  764: 764 */    int t4 = ido + (ido << 1);
/*  765: 765 */    int t5 = 0;
/*  766: 766 */    for (int k = 0; k < l1; k++) {
/*  767: 767 */      float tr2 = cc[(t3 - 1)] + cc[(t3 - 1)];
/*  768: 768 */      float cr2 = cc[t5] + taur * tr2;
/*  769: 769 */      cc[t5] += tr2;
/*  770: 770 */      float ci3 = taui * (cc[t3] + cc[t3]);
/*  771: 771 */      ch[(t1 + t0)] = (cr2 - ci3);
/*  772: 772 */      ch[(t1 + t2)] = (cr2 + ci3);
/*  773: 773 */      t1 += ido;
/*  774: 774 */      t3 += t4;
/*  775: 775 */      t5 += t4;
/*  776:     */    }
/*  777:     */    
/*  778: 778 */    if (ido == 1) {
/*  779: 779 */      return;
/*  780:     */    }
/*  781: 781 */    t1 = 0;
/*  782: 782 */    t3 = ido << 1;
/*  783: 783 */    for (k = 0; k < l1; k++) {
/*  784: 784 */      int t7 = t1 + (t1 << 1);
/*  785: 785 */      int t6 = t5 = t7 + t3;
/*  786: 786 */      int t8 = t1;
/*  787: 787 */      int t9; int t10 = (t9 = t1 + t0) + t0;
/*  788:     */      
/*  789: 789 */      for (int i = 2; i < ido; i += 2) {
/*  790: 790 */        t5 += 2;
/*  791: 791 */        t6 -= 2;
/*  792: 792 */        t7 += 2;
/*  793: 793 */        t8 += 2;
/*  794: 794 */        t9 += 2;
/*  795: 795 */        t10 += 2;
/*  796: 796 */        float tr2 = cc[(t5 - 1)] + cc[(t6 - 1)];
/*  797: 797 */        float cr2 = cc[(t7 - 1)] + taur * tr2;
/*  798: 798 */        cc[(t7 - 1)] += tr2;
/*  799: 799 */        float ti2 = cc[t5] - cc[t6];
/*  800: 800 */        float ci2 = cc[t7] + taur * ti2;
/*  801: 801 */        cc[t7] += ti2;
/*  802: 802 */        float cr3 = taui * (cc[(t5 - 1)] - cc[(t6 - 1)]);
/*  803: 803 */        float ci3 = taui * (cc[t5] + cc[t6]);
/*  804: 804 */        float dr2 = cr2 - ci3;
/*  805: 805 */        float dr3 = cr2 + ci3;
/*  806: 806 */        float di2 = ci2 + cr3;
/*  807: 807 */        float di3 = ci2 - cr3;
/*  808: 808 */        ch[(t9 - 1)] = (wa1[(index1 + i - 2)] * dr2 - wa1[(index1 + i - 1)] * di2);
/*  809: 809 */        ch[t9] = (wa1[(index1 + i - 2)] * di2 + wa1[(index1 + i - 1)] * dr2);
/*  810: 810 */        ch[(t10 - 1)] = (wa2[(index2 + i - 2)] * dr3 - wa2[(index2 + i - 1)] * di3);
/*  811: 811 */        ch[t10] = (wa2[(index2 + i - 2)] * di3 + wa2[(index2 + i - 1)] * dr3);
/*  812:     */      }
/*  813: 813 */      t1 += ido;
/*  814:     */    }
/*  815:     */  }
/*  816:     */  
/*  819:     */  static void dradb4(int ido, int l1, float[] cc, float[] ch, float[] wa1, int index1, float[] wa2, int index2, float[] wa3, int index3)
/*  820:     */  {
/*  821: 821 */    int t0 = l1 * ido;
/*  822:     */    
/*  823: 823 */    int t1 = 0;
/*  824: 824 */    int t2 = ido << 2;
/*  825: 825 */    int t3 = 0;
/*  826: 826 */    int t6 = ido << 1;
/*  827: 827 */    for (int k = 0; k < l1; k++) {
/*  828: 828 */      int t4 = t3 + t6;
/*  829: 829 */      int t5 = t1;
/*  830: 830 */      float tr3 = cc[(t4 - 1)] + cc[(t4 - 1)];
/*  831: 831 */      float tr4 = cc[t4] + cc[t4];
/*  832: 832 */      float tr1 = cc[t3] - cc[(t4 += t6 - 1)];
/*  833: 833 */      float tr2 = cc[t3] + cc[(t4 - 1)];
/*  834: 834 */      ch[t5] = (tr2 + tr3); int 
/*  835: 835 */        tmp114_113 = (t5 + t0);t5 = tmp114_113;ch[tmp114_113] = (tr1 - tr4); int 
/*  836: 836 */        tmp129_128 = (t5 + t0);t5 = tmp129_128;ch[tmp129_128] = (tr2 - tr3); int 
/*  837: 837 */        tmp144_143 = (t5 + t0);t5 = tmp144_143;ch[tmp144_143] = (tr1 + tr4);
/*  838: 838 */      t1 += ido;
/*  839: 839 */      t3 += t2;
/*  840:     */    }
/*  841:     */    
/*  842: 842 */    if (ido < 2)
/*  843: 843 */      return;
/*  844: 844 */    if (ido != 2) {
/*  845: 845 */      t1 = 0;
/*  846: 846 */      for (k = 0; k < l1; k++) { int t4;
/*  847: 847 */        int t5 = (t4 = t3 = (t2 = t1 << 2) + t6) + t6;
/*  848: 848 */        int t7 = t1;
/*  849: 849 */        for (int i = 2; i < ido; i += 2) {
/*  850: 850 */          t2 += 2;
/*  851: 851 */          t3 += 2;
/*  852: 852 */          t4 -= 2;
/*  853: 853 */          t5 -= 2;
/*  854: 854 */          t7 += 2;
/*  855: 855 */          float ti1 = cc[t2] + cc[t5];
/*  856: 856 */          float ti2 = cc[t2] - cc[t5];
/*  857: 857 */          float ti3 = cc[t3] - cc[t4];
/*  858: 858 */          float tr4 = cc[t3] + cc[t4];
/*  859: 859 */          float tr1 = cc[(t2 - 1)] - cc[(t5 - 1)];
/*  860: 860 */          float tr2 = cc[(t2 - 1)] + cc[(t5 - 1)];
/*  861: 861 */          float ti4 = cc[(t3 - 1)] - cc[(t4 - 1)];
/*  862: 862 */          float tr3 = cc[(t3 - 1)] + cc[(t4 - 1)];
/*  863: 863 */          ch[(t7 - 1)] = (tr2 + tr3);
/*  864: 864 */          float cr3 = tr2 - tr3;
/*  865: 865 */          ch[t7] = (ti2 + ti3);
/*  866: 866 */          float ci3 = ti2 - ti3;
/*  867: 867 */          float cr2 = tr1 - tr4;
/*  868: 868 */          float cr4 = tr1 + tr4;
/*  869: 869 */          float ci2 = ti1 + ti4;
/*  870: 870 */          float ci4 = ti1 - ti4; int 
/*  871:     */          
/*  872: 872 */            tmp416_415 = (t7 + t0);int t8 = tmp416_415;ch[(tmp416_415 - 1)] = (wa1[(index1 + i - 2)] * cr2 - wa1[(index1 + i - 1)] * ci2);
/*  873: 873 */          ch[t8] = (wa1[(index1 + i - 2)] * ci2 + wa1[(index1 + i - 1)] * cr2); int 
/*  874: 874 */            tmp486_485 = (t8 + t0);t8 = tmp486_485;ch[(tmp486_485 - 1)] = (wa2[(index2 + i - 2)] * cr3 - wa2[(index2 + i - 1)] * ci3);
/*  875: 875 */          ch[t8] = (wa2[(index2 + i - 2)] * ci3 + wa2[(index2 + i - 1)] * cr3); int 
/*  876: 876 */            tmp556_555 = (t8 + t0);t8 = tmp556_555;ch[(tmp556_555 - 1)] = (wa3[(index3 + i - 2)] * cr4 - wa3[(index3 + i - 1)] * ci4);
/*  877: 877 */          ch[t8] = (wa3[(index3 + i - 2)] * ci4 + wa3[(index3 + i - 1)] * cr4);
/*  878:     */        }
/*  879: 879 */        t1 += ido;
/*  880:     */      }
/*  881: 881 */      if (ido % 2 == 1) {
/*  882: 882 */        return;
/*  883:     */      }
/*  884:     */    }
/*  885: 885 */    t1 = ido;
/*  886: 886 */    t2 = ido << 2;
/*  887: 887 */    t3 = ido - 1;
/*  888: 888 */    int t4 = ido + (ido << 1);
/*  889: 889 */    for (k = 0; k < l1; k++) {
/*  890: 890 */      int t5 = t3;
/*  891: 891 */      float ti1 = cc[t1] + cc[t4];
/*  892: 892 */      float ti2 = cc[t4] - cc[t1];
/*  893: 893 */      float tr1 = cc[(t1 - 1)] - cc[(t4 - 1)];
/*  894: 894 */      float tr2 = cc[(t1 - 1)] + cc[(t4 - 1)];
/*  895: 895 */      ch[t5] = (tr2 + tr2); int 
/*  896: 896 */        tmp746_745 = (t5 + t0);t5 = tmp746_745;ch[tmp746_745] = (sqrt2 * (tr1 - ti1)); int 
/*  897: 897 */        tmp765_764 = (t5 + t0);t5 = tmp765_764;ch[tmp765_764] = (ti2 + ti2); int 
/*  898: 898 */        tmp780_779 = (t5 + t0);t5 = tmp780_779;ch[tmp780_779] = (-sqrt2 * (tr1 + ti1));
/*  899:     */      
/*  900: 900 */      t3 += ido;
/*  901: 901 */      t1 += t2;
/*  902: 902 */      t4 += t2;
/*  903:     */    }
/*  904:     */  }
/*  905:     */  
/*  907:     */  static void dradbg(int ido, int ip, int l1, int idl1, float[] cc, float[] c1, float[] c2, float[] ch, float[] ch2, float[] wa, int index)
/*  908:     */  {
/*  909: 909 */    int ipph = 0;int t0 = 0;int t10 = 0;
/*  910:     */    
/*  911: 911 */    int nbd = 0;
/*  912: 912 */    float dcp = 0.0F;float dsp = 0.0F;
/*  913: 913 */    int ipp2 = 0;
/*  914:     */    
/*  915: 915 */    int state = 100;
/*  916:     */    for (;;) { int t1;
/*  917:     */      int t2;
/*  918: 918 */      int k; int i; int t2; int t5; int t7; int j; int t3; int j; int is; switch (state) {
/*  919:     */      case 100: 
/*  920: 920 */        t10 = ip * ido;
/*  921: 921 */        t0 = l1 * ido;
/*  922: 922 */        float arg = tpi / ip;
/*  923: 923 */        dcp = (float)Math.cos(arg);
/*  924: 924 */        dsp = (float)Math.sin(arg);
/*  925: 925 */        nbd = ido - 1 >>> 1;
/*  926: 926 */        ipp2 = ip;
/*  927: 927 */        ipph = ip + 1 >>> 1;
/*  928: 928 */        if (ido < l1) {
/*  929: 929 */          state = 103;
/*  930:     */        }
/*  931:     */        else {
/*  932: 932 */          t1 = 0;
/*  933: 933 */          t2 = 0;
/*  934: 934 */          for (k = 0; k < l1; k++) {
/*  935: 935 */            int t3 = t1;
/*  936: 936 */            int t4 = t2;
/*  937: 937 */            for (int i = 0; i < ido; i++) {
/*  938: 938 */              ch[t3] = cc[t4];
/*  939: 939 */              t3++;
/*  940: 940 */              t4++;
/*  941:     */            }
/*  942: 942 */            t1 += ido;
/*  943: 943 */            t2 += t10;
/*  944:     */          }
/*  945: 945 */          state = 106; }
/*  946: 946 */        break;
/*  947:     */      case 103: 
/*  948: 948 */        t1 = 0;
/*  949: 949 */        for (i = 0; i < ido; i++) {
/*  950: 950 */          t2 = t1;
/*  951: 951 */          int t3 = t1;
/*  952: 952 */          for (k = 0; k < l1; k++) {
/*  953: 953 */            ch[t2] = cc[t3];
/*  954: 954 */            t2 += ido;
/*  955: 955 */            t3 += t10;
/*  956:     */          }
/*  957: 957 */          t1++;
/*  958:     */        }
/*  959:     */      case 106: 
/*  960: 960 */        t1 = 0;
/*  961: 961 */        t2 = ipp2 * t0;
/*  962: 962 */        t7 = t5 = ido << 1;
/*  963: 963 */        for (j = 1; j < ipph; j++) {
/*  964: 964 */          t1 += t0;
/*  965: 965 */          t2 -= t0;
/*  966: 966 */          int t3 = t1;
/*  967: 967 */          int t4 = t2;
/*  968: 968 */          int t6 = t5;
/*  969: 969 */          for (int k = 0; k < l1; k++) {
/*  970: 970 */            ch[t3] = (cc[(t6 - 1)] + cc[(t6 - 1)]);
/*  971: 971 */            cc[t6] += cc[t6];
/*  972: 972 */            t3 += ido;
/*  973: 973 */            t4 += ido;
/*  974: 974 */            t6 += t10;
/*  975:     */          }
/*  976: 976 */          t5 += t7;
/*  977:     */        }
/*  978: 978 */        if (ido == 1) {
/*  979: 979 */          state = 116;
/*  981:     */        }
/*  982: 982 */        else if (nbd < l1) {
/*  983: 983 */          state = 112;
/*  984:     */        }
/*  985:     */        else
/*  986:     */        {
/*  987: 987 */          t1 = 0;
/*  988: 988 */          t2 = ipp2 * t0;
/*  989: 989 */          t7 = 0;
/*  990: 990 */          for (j = 1; j < ipph; j++) {
/*  991: 991 */            t1 += t0;
/*  992: 992 */            t2 -= t0;
/*  993: 993 */            int t3 = t1;
/*  994: 994 */            int t4 = t2;
/*  995:     */            
/*  996: 996 */            t7 += (ido << 1);
/*  997: 997 */            int t8 = t7;
/*  998: 998 */            for (int k = 0; k < l1; k++) {
/*  999: 999 */              t5 = t3;
/* 1000:1000 */              int t6 = t4;
/* 1001:1001 */              int t9 = t8;
/* 1002:1002 */              int t11 = t8;
/* 1003:1003 */              for (i = 2; i < ido; i += 2) {
/* 1004:1004 */                t5 += 2;
/* 1005:1005 */                t6 += 2;
/* 1006:1006 */                t9 += 2;
/* 1007:1007 */                t11 -= 2;
/* 1008:1008 */                cc[(t9 - 1)] += cc[(t11 - 1)];
/* 1009:1009 */                cc[(t9 - 1)] -= cc[(t11 - 1)];
/* 1010:1010 */                cc[t9] -= cc[t11];
/* 1011:1011 */                cc[t9] += cc[t11];
/* 1012:     */              }
/* 1013:1013 */              t3 += ido;
/* 1014:1014 */              t4 += ido;
/* 1015:1015 */              t8 += t10;
/* 1016:     */            }
/* 1017:     */          }
/* 1018:1018 */          state = 116; }
/* 1019:1019 */        break;
/* 1020:     */      case 112: 
/* 1021:1021 */        t1 = 0;
/* 1022:1022 */        t2 = ipp2 * t0;
/* 1023:1023 */        t7 = 0;
/* 1024:1024 */        for (j = 1; j < ipph; j++) {
/* 1025:1025 */          t1 += t0;
/* 1026:1026 */          t2 -= t0;
/* 1027:1027 */          int t3 = t1;
/* 1028:1028 */          int t4 = t2;
/* 1029:1029 */          t7 += (ido << 1);
/* 1030:1030 */          int t8 = t7;
/* 1031:1031 */          int t9 = t7;
/* 1032:1032 */          for (int i = 2; i < ido; i += 2) {
/* 1033:1033 */            t3 += 2;
/* 1034:1034 */            t4 += 2;
/* 1035:1035 */            t8 += 2;
/* 1036:1036 */            t9 -= 2;
/* 1037:1037 */            t5 = t3;
/* 1038:1038 */            int t6 = t4;
/* 1039:1039 */            int t11 = t8;
/* 1040:1040 */            int t12 = t9;
/* 1041:1041 */            for (int k = 0; k < l1; k++) {
/* 1042:1042 */              cc[(t11 - 1)] += cc[(t12 - 1)];
/* 1043:1043 */              cc[(t11 - 1)] -= cc[(t12 - 1)];
/* 1044:1044 */              cc[t11] -= cc[t12];
/* 1045:1045 */              cc[t11] += cc[t12];
/* 1046:1046 */              t5 += ido;
/* 1047:1047 */              t6 += ido;
/* 1048:1048 */              t11 += t10;
/* 1049:1049 */              t12 += t10;
/* 1050:     */            }
/* 1051:     */          }
/* 1052:     */        }
/* 1053:     */      case 116: 
/* 1054:1054 */        float ar1 = 1.0F;
/* 1055:1055 */        float ai1 = 0.0F;
/* 1056:1056 */        t1 = 0;
/* 1057:1057 */        int t9 = t2 = ipp2 * idl1;
/* 1058:1058 */        t3 = (ip - 1) * idl1;
/* 1059:1059 */        for (int l = 1; l < ipph; l++) {
/* 1060:1060 */          t1 += idl1;
/* 1061:1061 */          t2 -= idl1;
/* 1062:     */          
/* 1063:1063 */          float ar1h = dcp * ar1 - dsp * ai1;
/* 1064:1064 */          ai1 = dcp * ai1 + dsp * ar1;
/* 1065:1065 */          ar1 = ar1h;
/* 1066:1066 */          int t4 = t1;
/* 1067:1067 */          int t5 = t2;
/* 1068:1068 */          int t6 = 0;
/* 1069:1069 */          t7 = idl1;
/* 1070:1070 */          int t8 = t3;
/* 1071:1071 */          for (int ik = 0; ik < idl1; ik++) {
/* 1072:1072 */            ch2[(t6++)] += ar1 * ch2[(t7++)];
/* 1073:1073 */            c2[(t5++)] = (ai1 * ch2[(t8++)]);
/* 1074:     */          }
/* 1075:1075 */          float dc2 = ar1;
/* 1076:1076 */          float ds2 = ai1;
/* 1077:1077 */          float ar2 = ar1;
/* 1078:1078 */          float ai2 = ai1;
/* 1079:     */          
/* 1080:1080 */          t6 = idl1;
/* 1081:1081 */          t7 = t9 - idl1;
/* 1082:1082 */          for (j = 2; j < ipph; j++) {
/* 1083:1083 */            t6 += idl1;
/* 1084:1084 */            t7 -= idl1;
/* 1085:1085 */            float ar2h = dc2 * ar2 - ds2 * ai2;
/* 1086:1086 */            ai2 = dc2 * ai2 + ds2 * ar2;
/* 1087:1087 */            ar2 = ar2h;
/* 1088:1088 */            t4 = t1;
/* 1089:1089 */            t5 = t2;
/* 1090:1090 */            int t11 = t6;
/* 1091:1091 */            int t12 = t7;
/* 1092:1092 */            for (ik = 0; ik < idl1; ik++) {
/* 1093:1093 */              c2[(t4++)] += ar2 * ch2[(t11++)];
/* 1094:1094 */              c2[(t5++)] += ai2 * ch2[(t12++)];
/* 1095:     */            }
/* 1096:     */          }
/* 1097:     */        }
/* 1098:     */        
/* 1099:1099 */        t1 = 0;
/* 1100:1100 */        for (j = 1; j < ipph; j++) {
/* 1101:1101 */          t1 += idl1;
/* 1102:1102 */          t2 = t1;
/* 1103:1103 */          for (int ik = 0; ik < idl1; ik++) {
/* 1104:1104 */            ch2[ik] += ch2[(t2++)];
/* 1105:     */          }
/* 1106:     */        }
/* 1107:1107 */        t1 = 0;
/* 1108:1108 */        t2 = ipp2 * t0;
/* 1109:1109 */        for (j = 1; j < ipph; j++) {
/* 1110:1110 */          t1 += t0;
/* 1111:1111 */          t2 -= t0;
/* 1112:1112 */          t3 = t1;
/* 1113:1113 */          int t4 = t2;
/* 1114:1114 */          for (int k = 0; k < l1; k++) {
/* 1115:1115 */            c1[t3] -= c1[t4];
/* 1116:1116 */            c1[t3] += c1[t4];
/* 1117:1117 */            t3 += ido;
/* 1118:1118 */            t4 += ido;
/* 1119:     */          }
/* 1120:     */        }
/* 1121:     */        
/* 1122:1122 */        if (ido == 1) {
/* 1123:1123 */          state = 132;
/* 1125:     */        }
/* 1126:1126 */        else if (nbd < l1) {
/* 1127:1127 */          state = 128;
/* 1128:     */        }
/* 1129:     */        else
/* 1130:     */        {
/* 1131:1131 */          t1 = 0;
/* 1132:1132 */          t2 = ipp2 * t0;
/* 1133:1133 */          for (j = 1; j < ipph; j++) {
/* 1134:1134 */            t1 += t0;
/* 1135:1135 */            t2 -= t0;
/* 1136:1136 */            t3 = t1;
/* 1137:1137 */            int t4 = t2;
/* 1138:1138 */            for (int k = 0; k < l1; k++) {
/* 1139:1139 */              int t5 = t3;
/* 1140:1140 */              int t6 = t4;
/* 1141:1141 */              for (int i = 2; i < ido; i += 2) {
/* 1142:1142 */                t5 += 2;
/* 1143:1143 */                t6 += 2;
/* 1144:1144 */                c1[(t5 - 1)] -= c1[t6];
/* 1145:1145 */                c1[(t5 - 1)] += c1[t6];
/* 1146:1146 */                c1[t5] += c1[(t6 - 1)];
/* 1147:1147 */                c1[t5] -= c1[(t6 - 1)];
/* 1148:     */              }
/* 1149:1149 */              t3 += ido;
/* 1150:1150 */              t4 += ido;
/* 1151:     */            }
/* 1152:     */          }
/* 1153:1153 */          state = 132; }
/* 1154:1154 */        break;
/* 1155:     */      case 128: 
/* 1156:1156 */        t1 = 0;
/* 1157:1157 */        t2 = ipp2 * t0;
/* 1158:1158 */        for (j = 1; j < ipph; j++) {
/* 1159:1159 */          t1 += t0;
/* 1160:1160 */          t2 -= t0;
/* 1161:1161 */          t3 = t1;
/* 1162:1162 */          int t4 = t2;
/* 1163:1163 */          for (int i = 2; i < ido; i += 2) {
/* 1164:1164 */            t3 += 2;
/* 1165:1165 */            t4 += 2;
/* 1166:1166 */            int t5 = t3;
/* 1167:1167 */            int t6 = t4;
/* 1168:1168 */            for (int k = 0; k < l1; k++) {
/* 1169:1169 */              c1[(t5 - 1)] -= c1[t6];
/* 1170:1170 */              c1[(t5 - 1)] += c1[t6];
/* 1171:1171 */              c1[t5] += c1[(t6 - 1)];
/* 1172:1172 */              c1[t5] -= c1[(t6 - 1)];
/* 1173:1173 */              t5 += ido;
/* 1174:1174 */              t6 += ido;
/* 1175:     */            }
/* 1176:     */          }
/* 1177:     */        }
/* 1178:     */      case 132: 
/* 1179:1179 */        if (ido == 1) {
/* 1180:1180 */          return;
/* 1181:     */        }
/* 1182:1182 */        for (int ik = 0; ik < idl1; ik++) {
/* 1183:1183 */          c2[ik] = ch2[ik];
/* 1184:     */        }
/* 1185:1185 */        t1 = 0;
/* 1186:1186 */        for (j = 1; j < ip; j++) {
/* 1187:1187 */          t2 = t1 += t0;
/* 1188:1188 */          for (int k = 0; k < l1; k++) {
/* 1189:1189 */            c1[t2] = ch[t2];
/* 1190:1190 */            t2 += ido;
/* 1191:     */          }
/* 1192:     */        }
/* 1193:     */        
/* 1194:1194 */        if (nbd > l1) {
/* 1195:1195 */          state = 139;
/* 1196:     */        }
/* 1197:     */        else
/* 1198:     */        {
/* 1199:1199 */          is = -ido - 1;
/* 1200:1200 */          t1 = 0;
/* 1201:1201 */          for (j = 1; j < ip; j++) {
/* 1202:1202 */            is += ido;
/* 1203:1203 */            t1 += t0;
/* 1204:1204 */            int idij = is;
/* 1205:1205 */            int t2 = t1;
/* 1206:1206 */            for (int i = 2; i < ido; i += 2) {
/* 1207:1207 */              t2 += 2;
/* 1208:1208 */              idij += 2;
/* 1209:1209 */              int t3 = t2;
/* 1210:1210 */              for (int k = 0; k < l1; k++) {
/* 1211:1211 */                c1[(t3 - 1)] = (wa[(index + idij - 1)] * ch[(t3 - 1)] - wa[(index + idij)] * ch[t3]);
/* 1212:1212 */                c1[t3] = (wa[(index + idij - 1)] * ch[t3] + wa[(index + idij)] * ch[(t3 - 1)]);
/* 1213:1213 */                t3 += ido;
/* 1214:     */              }
/* 1215:     */            }
/* 1216:     */          }
/* 1217:     */          return;
/* 1218:     */        }
/* 1219:     */        break;
/* 1220:1220 */      case 139:  is = -ido - 1;
/* 1221:1221 */        t1 = 0;
/* 1222:1222 */        for (j = 1; j < ip; j++) {
/* 1223:1223 */          is += ido;
/* 1224:1224 */          t1 += t0;
/* 1225:1225 */          int t2 = t1;
/* 1226:1226 */          for (int k = 0; k < l1; k++) {
/* 1227:1227 */            int idij = is;
/* 1228:1228 */            int t3 = t2;
/* 1229:1229 */            for (int i = 2; i < ido; i += 2) {
/* 1230:1230 */              idij += 2;
/* 1231:1231 */              t3 += 2;
/* 1232:1232 */              c1[(t3 - 1)] = (wa[(index + idij - 1)] * ch[(t3 - 1)] - wa[(index + idij)] * ch[t3]);
/* 1233:1233 */              c1[t3] = (wa[(index + idij - 1)] * ch[t3] + wa[(index + idij)] * ch[(t3 - 1)]);
/* 1234:     */            }
/* 1235:1235 */            t2 += ido;
/* 1236:     */          }
/* 1237:     */        } }
/* 1238:     */    }
/* 1239:     */    int t1;
/* 1240:     */    int is;
/* 1241:     */    int j;
/* 1242:     */  }
/* 1243:     */  
/* 1244:     */  static void drftb1(int n, float[] c, float[] ch, float[] wa, int index, int[] ifac) {
/* 1245:1245 */    int l2 = 0;
/* 1246:     */    
/* 1247:1247 */    int ip = 0;int ido = 0;int idl1 = 0;
/* 1248:     */    
/* 1249:1249 */    int nf = ifac[1];
/* 1250:1250 */    int na = 0;
/* 1251:1251 */    int l1 = 1;
/* 1252:1252 */    int iw = 1;
/* 1253:     */    label484:
/* 1254:1254 */    for (int k1 = 0; k1 < nf; k1++) {
/* 1255:1255 */      int state = 100;
/* 1256:     */      for (;;) { int ix2;
/* 1257:1257 */        switch (state) {
/* 1258:     */        case 100: 
/* 1259:1259 */          ip = ifac[(k1 + 2)];
/* 1260:1260 */          l2 = ip * l1;
/* 1261:1261 */          ido = n / l2;
/* 1262:1262 */          idl1 = ido * l1;
/* 1263:1263 */          if (ip != 4) {
/* 1264:1264 */            state = 103;
/* 1265:     */          }
/* 1266:     */          else {
/* 1267:1267 */            ix2 = iw + ido;
/* 1268:1268 */            int ix3 = ix2 + ido;
/* 1269:     */            
/* 1270:1270 */            if (na != 0) {
/* 1271:1271 */              dradb4(ido, l1, ch, c, wa, index + iw - 1, wa, index + ix2 - 1, wa, index + ix3 - 1);
/* 1272:     */            }
/* 1273:     */            else {
/* 1274:1274 */              dradb4(ido, l1, c, ch, wa, index + iw - 1, wa, index + ix2 - 1, wa, index + ix3 - 1);
/* 1275:     */            }
/* 1276:1276 */            na = 1 - na;
/* 1277:1277 */            state = 115; }
/* 1278:1278 */          break;
/* 1279:     */        case 103: 
/* 1280:1280 */          if (ip != 2) {
/* 1281:1281 */            state = 106;
/* 1282:     */          }
/* 1283:     */          else
/* 1284:     */          {
/* 1285:1285 */            if (na != 0) {
/* 1286:1286 */              dradb2(ido, l1, ch, c, wa, index + iw - 1);
/* 1287:     */            } else
/* 1288:1288 */              dradb2(ido, l1, c, ch, wa, index + iw - 1);
/* 1289:1289 */            na = 1 - na;
/* 1290:1290 */            state = 115; }
/* 1291:1291 */          break;
/* 1292:     */        
/* 1293:     */        case 106: 
/* 1294:1294 */          if (ip != 3) {
/* 1295:1295 */            state = 109;
/* 1296:     */          }
/* 1297:     */          else
/* 1298:     */          {
/* 1299:1299 */            ix2 = iw + ido;
/* 1300:1300 */            if (na != 0) {
/* 1301:1301 */              dradb3(ido, l1, ch, c, wa, index + iw - 1, wa, index + ix2 - 1);
/* 1302:     */            } else
/* 1303:1303 */              dradb3(ido, l1, c, ch, wa, index + iw - 1, wa, index + ix2 - 1);
/* 1304:1304 */            na = 1 - na;
/* 1305:1305 */            state = 115; }
/* 1306:1306 */          break;
/* 1307:     */        case 109: 
/* 1308:1308 */          if (na != 0) {
/* 1309:1309 */            dradbg(ido, ip, l1, idl1, ch, ch, ch, c, c, wa, index + iw - 1);
/* 1310:     */          } else
/* 1311:1311 */            dradbg(ido, ip, l1, idl1, c, c, c, ch, ch, wa, index + iw - 1);
/* 1312:1312 */          if (ido == 1) {
/* 1313:1313 */            na = 1 - na;
/* 1314:     */          }
/* 1315:     */        case 115: 
/* 1316:1316 */          l1 = l2;
/* 1317:1317 */          iw += (ip - 1) * ido;
/* 1318:     */          break label484;
/* 1319:     */        }
/* 1320:     */      }
/* 1321:     */    }
/* 1322:1322 */    if (na == 0)
/* 1323:1323 */      return;
/* 1324:1324 */    for (int i = 0; i < n; i++) {
/* 1325:1325 */      c[i] = ch[i];
/* 1326:     */    }
/* 1327:     */  }
/* 1328:     */}


/* Location:           C:\Users\Raul\Desktop\StarMade\StarMade.jar
 * Qualified Name:     com.jcraft.jorbis.Drft
 * JD-Core Version:    0.7.0-SNAPSHOT-20130630
 */